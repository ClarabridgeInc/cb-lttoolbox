plugins {
    id 'cpp'
    id 'java'
    //id 'maven-publish'
}

apply from: "${gradleRootDir}/java.gradle"
apply from: "${gradleRootDir}/proto.gradle"

version='0.0.1' // project.'lttoolbox.api.version'

artifacts {
    compile jar
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = "com.google.protobuf:protoc:${versions.protobuf}"
    }
}

dependencies {
    compile libraries.protobuf_java_util
}

jar.archiveName = "${rootProject.name}-api-${version}.jar"

task generateSource {
    // $buildDir/
    ext.headerDir = file("${protobuf.generatedFilesBaseDir}/src/main/cpp")
    ext.sourceDir = file("${protobuf.generatedFilesBaseDir}/src/main/cpp")
}

def thirdPartyDir="$repoRootDir/third_party"
def extractedArchiveDir="$buildDir/extracted"

task extractProtoArchive(type: Copy) {
    from tarTree("$thirdPartyDir/protobuf-${versions.protobuf}-bin.tar.gz")
    into extractedArchiveDir
    // doLast { println "thirdPartyDir: $thirdPartyDir extractedArchiveDir: $extractedArchiveDir" }
}

model {
    buildTypes {
        //release
        debug
    }

    toolChains {
        gcc(Gcc)
        //clang(Clang)
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    binaries {
        // all withType(NativeExecutableBinarySpec) withType(NativeExecutableSpec) withType(SharedLibraryBinarySpec)
        withType(SharedLibraryBinarySpec) {
            // if (toolChain in Gcc) { // Clang
            println toolChain
            // '-O2', '-fno-access-control', '-Wno-narrowing'
            cppCompiler.args '-std=c++0x', '-O0', '-g' // , '-fsanitize=address', '-fno-omit-frame-pointer'
            linker.args '-g' // , '-fsanitize=address'
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            protobuf {
                headers.srcDir "$extractedArchiveDir/protobuf-${versions.protobuf}/src"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("$extractedArchiveDir/protobuf-${versions.protobuf}/libs/libprotobuf.a")
                }
            }
        }
    }

    components {
        ltt(NativeLibrarySpec) { // ltt(NativeLibrarySpec) ltt(NativeExecutableSpec)
            targetPlatform 'x64'
            sources {
                cpp {
                    // generatedBy project.tasks.generateProto
                    generatedBy project.tasks.generateSource
                    source {
                        srcDirs 'src/main/cpp'
                        include 'ltt.pb.cc'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/cpp'
                        srcDirs "$extractedArchiveDir/protobuf-${versions.protobuf}/src"
                    }
                    lib library: 'protobuf', linkage: 'static'
                }
            }
        }
    }

    tasks.compileLttSharedLibraryLttCpp {
        dependsOn extractProtoArchive
    }
}

// !!!
// generateSource.dependsOn project.tasks.generateProto
